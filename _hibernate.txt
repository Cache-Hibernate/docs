*** (Вопросы на интервью по технологиям Java Spring и Hibernate ** Объясните суть паттерна DI или IoC) http://j4sq.blogspot.com/2012/01/java-spring-hibernate.html
    (Lambda architecture) http://en.wikipedia.org/wiki/Lambda_architecture





http://stoflru.org/questions/26132940/what-are-the-difference-between-jpas-entitymanager-and-hibernates-first-level
------------------------------------------------------------------------------------------------------------------------[  ]
"JPA" - это интерфейс, который реализуется с помощью других ORM.
Эти - "ORM" (Object Relational Mapping) - выступают в качестве поставщика для этого, это способ сохранения объектов в реляционную базу данных.

"Entity Manager" - является частью спецификации JPA для выполнения доступа к базе данных с помощью управляемых объектов.
"Hibernate"      - это один из самых популярных на сегодняшний день ORM-фреймворков
"Hibernate" кэш-памяти первого уровня-cache - чтобы вернуть кэшированные <hibernate лиц>.









http://habrahabr.ru/post/135176/
http://habrahabr.ru/post/136375/
http://articles.javatalks.ru/articles/26
http://dr-magic.blogspot.com/2010/01/hibernate-4.html
========================================================================================================================[ Hibernate cache ]
Прежде всего Hibernate cache - это 3 уровня кеширования:
> Кеш первого уровня (First-level cache)
> Кеш второго уровня (Second-level cache)
> Кеш запросов (Query cache)


http://habrahabr.ru/post/135176/
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = [ Кеш первого уровня ]
> Кеш первого уровня всегда привязан к объекту сессии. Hibernate всегда по умолчанию использует этот кеш и его нельзя отключить.
  При использовании методов save(), update(), saveOrUpdate(), load(), get(), list(), iterate(), scroll() всегда будет задействован кеш первого уровня.
  В этом примере будет выполнен 1 запрос в базу, несмотря на то, что делается 2 вызова load(), так как эти вызовы происходят в контексте одной сессии.
+-----------------------------------------------------------------------------+
| SharedDoc persistedDoc = (SharedDoc) session.load(SharedDoc.class, docId);  |
| System.out.println(persistedDoc.getName());                                 |
| user1.setDoc(persistedDoc);                                                 |
|                                                                             |
| persistedDoc = (SharedDoc) session.load(SharedDoc.class, docId);            |
| System.out.println(persistedDoc.getName());                                 |
| user2.setDoc(persistedDoc);                                                 |
+-----------------------------------------------------------------------------+
Важный момент, при использовании метода "load()" Hibernate не выгружает из БД данные до тех пор пока они не потребуются (когда осуществляется первый вызов load, мы получаем прокси объект или сами данные в случае, если данные уже были в кеше сессии).
В случае прокси-объекта мы можем связать два объекта не делая запрос в базу, в отличии от метода get().


= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = [ Кеш второго уровня ]
> Кеш второго уровня привязан к объекту-фабрике сессий (Session Factory object), что подразумевает видимость этого кеша гораздо шире.
  Чтение из кеша второго уровня происходит только в том случае, если нужный объект не был найден в кеше первого уровня.
  В данном примере будет выполнено 2 запроса в базу, это связано с тем, что по умолчанию кеш второго уровня отключен.
+-----------------------------------------------------------------------------+
| Session session = factory.openSession();                                    |
| SharedDoc doc = (SharedDoc) session.load(SharedDoc.class, 1L);              |
| System.out.println(doc.getName());                                          |
| session.close();                                                            |
|                                                                             |
| session = factory.openSession();                                            |
| doc = (SharedDoc) session.load(SharedDoc.class, 1L);                        |
| System.out.println(doc.getName());                                          |
| session.close();                                                            |
+-----------------------------------------------------------------------------+
> Сам Hibernate не реализует кеширование как таковое, лишь предоставляет структуру для его реализации. 
  Поэтому подключить можно любую из популярных реализаций которая соответствует спецификации ORM фреймворка ("EHCache","OSCache","SwarmCache","JBoss TreeCache")
  Для включения необходимо добавить следующие строки в Вашем конфигурационном файле JPA (persistence.xml):
+---------------------------------------------------------------------------------------------------------------+
| <property name="hibernate.cache.provider_class" value="net.sf.ehcache.hibernate.SingletonEhCacheProvider"/>   |
| //или  в более старых версиях                                                                                 |
| //<property name="hibernate.cache.provider_class" value="org.hibernate.cache.EhCacheProvider"/>               |
| <property name="hibernate.cache.use_second_level_cache" value="true"/>                                        |
+---------------------------------------------------------------------------------------------------------------+
> Помимо всего этого, вероятней всего, Вам также понадобится отдельно настроить и саму реализацию кеша. В случае с EHCache это нужно сделать в файле ehcache.xml
  И в завершение еще нужно указать самому хибернейту, что именно кешировать (после всех этих манипуляций кеш второго уровня будет включен и в примере выше будет выполнен только 1 запрос в базу):
+--------------------------------------------------------+
| @Entity                                                |
| @Table(name = "shared_doc")                            |
| @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)    |
| public class SharedDoc{                                |
|     private Set<User> users;                           |
| }                                                      |
+--------------------------------------------------------+
> Что есть очень разумно, учитывая сколько лишней памяти занимает каждый объект (следует помнить зависимости класса по умолчанию не кешируются).
  В классе выше (SharedDoc) при выборке коллекция 'users' будет доставаться из БД, а не из кеша второго уровня. Если хотите кешировать и зависимости, то класс должен выглядеть так:
+-----------------------------------------------------------+
| @Entity                                                   |
| @Table(name = "shared_doc")                               |
| @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)       |
| public class SharedDoc{                                   |
|     @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)   |
|     private Set<User> users;                              |
| }                                                         |
+-----------------------------------------------------------+


= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = [ Кеш запросов ]
> Результаты такого рода запросов не сохраняются ни кешом первого, ни второго уровня:
+---------------------------------------------------------------------------------------------+
| Query query = session.createQuery("from SharedDoc doc where doc.name = :name");             |
|                                                                                             |
| SharedDoc persistedDoc = (SharedDoc) query.setParameter("name", "first").uniqueResult();    |
| System.out.println(persistedDoc.getName());                                                 |
| user1.setDoc(persistedDoc);                                                                 |
|                                                                                             |
| persistedDoc = (SharedDoc) query.setParameter("name", "first").uniqueResult();              |
| System.out.println(persistedDoc.getName());                                                 |
| user2.setDoc(persistedDoc);                                                                 |
+---------------------------------------------------------------------------------------------+
> Кеш запросов тоже по умолчанию отключен для включения нужно добавить следующую строку в конфигурационный файл:
+-----------------------------------------------------------------------------+
| <property name="hibernate.cache.use_query_cache" value="true"/>             |
+-----------------------------------------------------------------------------+
> (Кеш запросов похож на кеш второго уровня) но в отличии от него ключом к данным кеша выступает не идентификатор объекта, а совокупность параметров запроса (таким образом, этот кеш рационально использовать с кешем второго уровня).
  Это как раз то место, где можно использовать кеш запросов:
+---------------------------------------------------------------------------------------------+
| Query query = session.createQuery("from SharedDoc doc where doc.name = :name");             |
| query.setCacheable(true);                                                                   |
|                                                                                             |
| SharedDoc persistedDoc = (SharedDoc) query.setParameter("name", "first").uniqueResult();    |
| System.out.println(persistedDoc.getName());                                                 |
| user1.setDoc(persistedDoc);                                                                 |
|                                                                                             |
| persistedDoc = (SharedDoc) query.setParameter("name", "first").uniqueResult();              |
| System.out.println(persistedDoc.getName());                                                 |
| user2.setDoc(persistedDoc);                                                                 |
+---------------------------------------------------------------------------------------------+


http://habrahabr.ru/post/134102/
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++[ Размер Java объектов ]
> Попробуем подсчитать сколько же будет занимать объект класса Integer в нашей 32-х разрядной HotSpot JVM (нужно будет заглянуть в сам класс, нам интересны все поля, которые не объявлены как static):
+----------------------------------------------------+
| 8-ми байтовые типы(double и long)                  |
| 4-х байтовые типы(int и float)                     |
| 2-х байтовые типы(short и char)                    |
| Одно байтовые типы(boolean и byte)                 |
| Ссылочные переменные                               |
+----------------------------------------------------+
| private final char value[];                        |
| private final int offset;                          |
| private final int count;                           |
| private int hash;                                  |
+----------------------------------------------------+
| Заголовок: 8 байт                                  |
| Поля int: 4 байта * 3 == 12 байт                   |
| Ссылочная переменная на объект массива: 4 байта    |
| Итого: 24 байта                                    |
+----------------------------------------------------+


http://habrahabr.ru/post/135176/
http://docs.jboss.org/hibernate/core/3.3/reference/en/html/performance.html#performance-cache-mapping
http://javac-dmx.blogspot.com/2015/01/13-hibernate.html
http://articles.javatalks.ru/articles/26
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = [ Стратегии кеширования ]
Стратегии кеширования определяют поведения кеша в определенных ситуациях. Выделяют четыре группы:
> Read-only            - используется для данных, которые часто читаются но никогда не изменяются (изменение данных при использовании этой стратегии приведёт к исключению).
                         Испльзование данного подхода в распределённом кэше позволяет не волноваться об синхронизации данных, однако может привести к сильной загрузке базы на начальном этапе работы кластера пока не закэширует все необходимые объекты.
> Read-write           - используется для данных которые гораздо чаще читаются, чем обновляются, однако, устаревание которых критично для приложения. (при этом подходе, данные блокируются для чтения во время их изменении с использованием “soft-lock” механизма).
                         Недостатки - так если в кластере имеется возможность изменения одних и тех же данных разными узлами, довольно часто могут случаться блокировки устаревших данных в кэше, что сводит на нет приемущества использования данной стратегии.
> Nonstrict-read-write - используется для данных, которые изменяются очень редко (при параллельном доступе к данным из разных транзакций данная стратегия не даёт никакой гарантии, что в кэше будут сохранены актуальные данные, так как Hibernate никак не изолирует от других транзакций данные во время изменения).
                         Не слудует использовать данную стратегию, если небольшая вероятность считывания устаревших данных критична для приложения.
                         Данная стратегия обеспечивает уровень изоляции транзакций "read commited"
> Transactional        - используется, когда необходима изоляция транзакций вполоть до уровня "repeatable read". Так же как и предыдущие используется для данных, которые гораздо чаще читаются нежели обновляются.


= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = [ Провайдеры кэша ]
Ни одна из вышеперечисленных стратегий не реализуется самим хибернэйтом. Для этого используются провайдеры кэша:
> "EhCache"              - изначально разрабатывался как кэш уровня процесса, однако, в последник версиях появилась возможность реализации так же распределённого кэша. Имеется поддрержка кэша запросов и выгрузки данных на диск.
> "OpenSymphony OSCache" - реализует кэш только на уровне процесса. Поддерживает кэш запросов и выгрузку данных на диск.
> "SwarmCache"           - распределённый кэш, который базирется на JGroups. Нет поддержки кэша запросов.
> "JBoss Cache"          - может быть как локальным так и распределённым. Это полностью транзакционный кэш с возможностью репликации и инвалидаци, а так же с возможностью обмена как синхронными так и асинхронными валидационными сообщениями.


http://habrahabr.ru/post/135176/
========================================================================================================================[ Cache region ]
> Регион или область — это логический разделитель памяти вашего кеша.
  Для каждого региона можна настроить свою политику кеширования (если регион не указан то используется регион по умолчанию который имеет полное имя класса для которого применяется кеширование).
  В коде выглядит так:
+---------------------------------------------------------------------------------------------+
| @Cache(usage = CacheConcurrencyStrategy.READ_WRITE, region = "STATIC_DATA")                 |
+---------------------------------------------------------------------------------------------+
  А для кеша запросов так:
+---------------------------------------------------------------------------------------------+
| query.setCacheRegion("STATIC_DATA");                                                        |
| //или в случае критерии                                                                     |
| criteria.setCacheRegion("STATIC_DATA");                                                     |
+---------------------------------------------------------------------------------------------+


http://habrahabr.ru/post/135176/
========================================================================================================================[ ... ]
> Во время разработки приложения, особенно сначала, очень удобно видеть действительно ли кешируются те или иные запросы, для этого нужно указать фабрике сессий следующие свойства:
+---------------------------------------------------------------------------------------------+
| <property name="hibernate.show_sql" value="true"/>                                          |
| <property name="hibernate.format_sql" value="true"/>                                        |
+---------------------------------------------------------------------------------------------+
> В дополнение фабрика сессий также может генерировать и сохранять статистику использования всех объектов, регионов, зависимостей в кеше (для этого есть объекты Statistics для фабрики и SessionStatistics для сессии):
+---------------------------------------------------------------------------------------------+
| <property name="hibernate.generate_statistics" value="true"/>                               |
| <property name="hibernate.cache.use_structured_entries" value="true"/>                      |
+---------------------------------------------------------------------------------------------+
> Методы сессии:
  flush()    - синхронизирует объекты сессии с БД и в то же время обновляет сам кеш сессии
  evict()    - нужен для удаления объекта из кеша cессии
  contains() - определяет находится ли объект в кеше сессии или нет
  clear()    - очищает весь кеш



http://habrahabr.ru/post/136375/
========================================================================================================================[ Практика Hibernate Cache ]
> Миграционные скрипты:
  одной из наиболее частых проблем при работе с кешем в моем приложении является необходимость накатывать миграционные скрипты на работающий сервер (получаем проблему несовместимости данных).
  1. Рестарт сервера (самый простой и, обычно, самый не приемлемый способ)
  2. Очистка кеша через определенные механизмы (пожалуй самый оптимальный по простоте и надежности метод)
+-----------------------------------------------------------------------------+
| public String dumpKeys() {                                                  |
|     String regions[] = CacheManager.getInstance().getCacheNames();          |
|     StringBuilder allkeys = new StringBuilder();                            |
|     String newLine = System.getProperty("line.separator");                  |
|     for (String region : regions) {                                         |
|         Ehcache cache = CacheManager.getInstance().getEhcache(region);      |
|         allkeys.append(toSomeReadableString(cache.getKeys()));              |
|         allkeys.append(newLine);                                            |
|     }                                                                       |
|     return allkeys.toString();                                              |
| }                                                                           |
+-----------------------------------------------------------------------------+
  3. Запуск миграционных скриптов, используя фабрику сессий работающего сервера, (это похоже на второй метод с той лишь разницей, что мы не очищаем кеш, а пропускаем все миграционные скрипты через существующую фабрику)
> Кеш запросов - самый не эффективный из всех перечисленных этому есть несколько причин:
  1. ключом к данным этого кеша выступает не только параметры запроса, но и сам запрос (это особенно важно, когда запросов много и они большие)
  2. Кеш запросов очень часто сбрасывается (если хоть одна из таблиц которые участвуют в запросе была модифицирована, то кеш будет сброшен и запрос выполнен по новой)
  Типичный пример плохого места для кеша запроса — выборка количества чего-либо на ресурсе с высокой скоростью обновлений/добавлений сущностей (каждый раз при вставке в таблицу нового плана или изменении существующего, кеш будет сбрасываться):
+-----------------------------------------------------------------------------+
| Criteria criteria = getSession().createCriteria(Plan.class);                |
| criteria.setProjection(Projections.projectionList()                         |
|     .add(Projections.groupProperty("status"))                               |
|     .add(Projections.rowCount())                                            |
|  );                                                                         |
|  criteria.setCacheable(true);                                               |
+-----------------------------------------------------------------------------+
> Удаление закешированных объектов (удаление объектов, которые находятся в закешированной коллекции и один из пользователей был удален, то мы выполняем его удаление):
+-----------------------------------------------------------------------------+
| @Entity                                                                     |
| @Table(name = "shared_doc")                                                 |
| @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)                         |
| public class SharedDoc{                                                     |
|     @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)                     |
|     private Set<User> users;                                                |
| }                                                                           |
+-----------------------------------------------------------------------------+
| getSession().delete(user)                                                   |
+-----------------------------------------------------------------------------+
  То есть, в данном примере удаление должно выглядеть так (задача очень усложняется когда таких коллекций много и они могут быть раскиданы по разным сущностям. Подобного рода проблема также может привести к ObjectNotFoundException):
+-----------------------------------------------------------------------------+
| SharedDoc doc = (SharedDoc) session.load(SharedDoc.class, 1L);              |
| doc.getUsers().remove(user);                                                |
| session.delete(user);                                                       |
+-----------------------------------------------------------------------------+
> Конкурентные транзакции (иногда кеш может вести себя не так как Вы ожидаете в случае конкурентных транзакций)
  Казалось бы, что при втором вызове плана он должен был бы быть получен из кеша второго уровня - но это не так:
+-------------------------------------------------------+
| Session session1 =  getSession();                     |
| Session session2 =  getSession());                    |
|                                                       |
| Transaction t = session1.beginTransaction();          |
| Plan plan = (Plan) session1.load(Plan.class, 1L);     |
| System.out.println (plan.getName());                  |
| plan.setName(newName);                                |
| t.commit();                                           |
|                                                       |
| t = session2.beginTransaction();                      |
| plan = (Plan) session2.load(Plan.class, 1L);          |
| System.out.println (plan.getName());                  |
| tx2.commit();                                         |
|                                                       |
| session1.close();                                     |
| session2.close();                                     |
+-------------------------------------------------------+








http://javac-dmx.blogspot.com/2015/01/13-hibernate.html
------------------------------------------------------------------------------------------------------------------------[ Hibernate кэш второго уровня ]
> Кэш первого уровня встроен в hibernate, он всегда включен, его не возможно отключить.
  Область действия, кэша первого уровня,  в течении действия одной транзакции сессии hibernate, т.е. между вызовами session.beginTransaction() и session.getTransaction().commit().
> Кэш второго уровня, прежде всего он, уменьшает количество sql запросов к базе данных, увеличивая при этом время отклика программы (один раз, попав в кэш второго уровня объект-сущность, используется на всем протяжении жизни объекта sessionFactory).
  Кэш второго уровня нужно включать непосредственно в настройках Hibernate, и он реализуется провайдером,  сторонней библиотекой кэшем. Выбор провайдера зависит от стратегии, которые он может поддерживать, под стратегией понимается, что можно делать над объектом кэша – нашей сущностью: изменять, удалять, вставлять, читать,


http://javatalks.ru/topics/11004?page=1#107768
------------------------------------------------------------------------------------------------------------------------[ Hibernate и его кеши ]
> В Hibernate есть следующие уровни кеша:
  Session level (1 level cache) - работает только между открытием и закрытием сессии. Например, если вы выбрали объект, а затем хотите его еще раз выбрать - он будет браться из кеша. После закрытия сессии весь кеш очистится.
  Process level (2 level cache, SessionFactory cache) - здесь кешируются данные всех сессий. Нужно заметить однако, что если мы говорим про fetch="join", то Hibernate никогда не будет искать дочерние объекты в кеше.
  Query cache - это расширение кеша 2го уровня. Если его активировать, то при выполнении запроса, все ID выбранных объектов будут сохраняться в кеше.


http://habrahabr.ru/post/135176/
------------------------------------------------------------------------------------------------------------------------[ Кеш запросов ]


http://articles.javatalks.ru/articles/26
------------------------------------------------------------------------------------------------------------------------[ Кэш Hibernate ]
> Одной из основных возможностей Hibernate является использование кэша.
  Кэш содержит в себе локальную копию данных, которая может сохраняться в памяти либо на диске (имеет смысл когда приложение и база данных распологаются на разных физических машинах).

> Hibernate обращается к кэшу в следующих случаях:
  Приложение выполняет поиск сущности по идентификатору
  Приложение выполняет ленивую загрузку коллекции

> Кэши разделяются в зависимости от области видимости (scope) на следующие виды:
  "Session scope cache"     - Кэш привязанный к транзакции, действительный только пока транзакция не завершиться. Каждая транзакция имеет свой кэш, следовательно, доступ к данному кэшу не может быть осуществлён в несколько потоков.
  "Process scope cache"     - Кэш привязанный к определённому процессу конкретной JVM и общий для многих транзакций с возможностью параллельного доступа.
  "Cluster scope cache"     - Кэш общий для нескольких процессов на одной машине или нескольких машин в составе кластера.
  "Transaction scope cache" - представляет собой кэш первого уровня hibernate, кэш же второго уровня может быть реализован либо в области видимости процесса илибо как распределённый кэш.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [ Кэш первого уровня ]
> Кэш первого уровня в hibernate связан с объектом сессии, он включён по умолчанию и нет возможности отключить его.
  Когда вы передаёте объект в метод ((save(),update(),saveOrUpdate())) или пытаетесь обратиться к нему с помощью методов ((load(),get(),scroll(),list(),iterate())) - выполняется добавление элемента в кэш сессии. И следующий раз, когда нужно будет произвести повторную выборку данного объекта из БД в текущей сессии обращения к БД уже не произойдёт, объект будет взят из кэша.
> Обнуление кэша происходит после закрытия сессии. Так же, содержимым кэша можно управлять используя методы класса Session:
  contains() - проверяет сохранён ли объект в кэше
  flush()    - синхронизирует содержимое кэша с базой данных
  evict()    - удаляет объект из кэша
  clear()    - обнуляет кэш

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [ Кэш второго уровня ]
> Кэш второго уровня в hibernate может быть настроен как 'кэш процесса' и 'распеределённый кэш' (в рамках JVM или кластера).
  В отличие от кэша первого уровня, использование кэша второго уровня является опциональным, (он может быть как включён так и отключён).
> В кэше второго уровня сущности хранятся в разобранном состоянии (что-то наподобие сериализованного состояния, однако, используемый алгоритм намного быстрее сериализации). Соответственно, доступ к объектам, сохранённым в кэше второго уроня осуществляется по значению. Доступ к сущности может осуществляться из параллельных транзакций (каждая транзакция будет иметь свою копию данных).
  Вообще, кэш второго уровня не рекомендуется использовать для данных, которые должны изменяться слишком часто, так как затраты производительности на поддержание актуальности кэша могут оказаться больше чем выйгрыш от использования кэша.
> Стратегии паралельного доступа к кэшу второго уровня:
  "read only"            - используется для данных, которые часто читаются но никогда не изменяются (изменение данных при использовании этой стратегии приведёт к исключению).
                           Испльзование данного подхода в распределённом кэше позволяет не волноваться об синхронизации данных, однако может привести к сильной загрузке базы на начальном этапе работы кластера пока не закэширует все необходимые объекты.
  "nonstrict read write" - используется для данных, которые изменяются очень редко (при параллельном доступе к данным из разных транзакций данная стратегия не даёт никакой гарантии, что в кэше будут сохранены актуальные данные, так как Hibernate никак не изолирует от других транзакций данные во время изменения).
                           Не слудует использовать данную стратегию, если небольшая вероятность считывания устаревших данных критична для приложения.
  "read write"           - используется для данных которые гораздо чаще читаются, чем обновляются, однако, устаревание которых критично для приложения. (при этом подходе, данные блокируются для чтения во время их изменении с использованием “soft-lock” механизма).
                           Недостатки - так если в кластере имеется возможность изменения одних и тех же данных разными узлами, довольно часто могут случаться блокировки устаревших данных в кэше, что сводит на нет приемущества использования данной стратегии.
                           Данная стратегия обеспечивает уровень изоляции транзакций "read commited"
  "transactional"        - используется, когда необходима изоляция транзакций вполоть до уровня "repeatable read". Так же как и предыдущие используется для данных, которые гораздо чаще читаются нежели обновляются.

> Ни одна из вышеперечисленных стратегий не реализуется самим хибернэйтом. Для этого используются провайдеры кэша:
  "EhCache"              - изначально разрабатывался как кэш уровня процесса, однако, в последник версиях появилась возможность реализации так же распределённого кэша. Имеется поддрержка кэша запросов и выгрузки данных на диск.
  "OpenSymphony OSCache" - реализует кэш только на уровне процесса. Поддерживает кэш запросов и выгрузку данных на диск.
  "SwarmCache"           - распределённый кэш, который базирется на JGroups. Нет поддержки кэша запросов.
  "JBoss Cache"          - может быть как локальным так и распределённым. Это полностью транзакционный кэш с возможностью репликации и инвалидаци, а так же с возможностью обмена как синхронными так и асинхронными валидационными сообщениями.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [ Механизмы синхронизации данных в распределённом кэше ]
> Механизмы поддержания актуальности данных:
  "копирование" (replication)   - если состояние сущности было изменнено, то её новое состояние будет разослано каждому члену кластера, что ведёт к повышенному потреблению трафика.
  "анулирование" (invalidation) - если состояние сущности было изменено, то всем узлам кластера рассылается сообщение, указывающее на то, что сущность с определённым идентификатором была изменена. 
> Механизмы передачи сообщений о состоянии объектов:
  "синхронный"  - после отправи сообщения об изменении объекта в кэше доступ к кэшу блокируется, пока не будет получено подтверждение от всех узлов кластера.
  "асинхронный" - отправка сообщения об изменении сущности не блокирует доступ к кэшу и не требует подтверждения от всех машин кластера.


http://dr-magic.blogspot.com/2010/01/hibernate-2.html
------------------------------------------------------------------------------------------------------------------------[ Установка уровня изоляции ]
> hibernate.connection.isolation = 4
  1 - изоляция уровня чтения неподтвержденного;
  2 - изоляция уровня чтения подтвержденного;
  4 - изоляция уровня повторяемого чтения;
  8 - упорядоченная изоляция.


====================================================================================================================================================================================================================
http://unity3d.vx0.ru/onlayn_prilozhenie
http://stoflru.org/questions/26132940/what-are-the-difference-between-jpas-entitymanager-and-hibernates-first-level
(Understanding hibernate first level cache with example) http://howtodoinjava.com/2013/07/01/understanding-hibernate-first-level-cache-with-example/
(Hibernate EhCache configuration tutorial) http://howtodoinjava.com/2013/07/04/hibernate-ehcache-configuration-tutorial/
(Кэширование в Hibernate) http://dr-magic.blogspot.com/2010/01/hibernate-4.html
(Очистка сессии, уровни изоляции транзакций, выбор и установка уровня изоляции транзакций в Hibernate) http://dr-magic.blogspot.com/2010/01/hibernate-2.html
http://rsdn.ru/forum/java/2518245.flat
(Разработка приложений баз данных с использованием средств объектно-реляционного отображения) http://ivt.corp7.uniyar.ac.ru/moodle/pluginfile.php/65/mod_page/content/1/edu/ormbook.pdf
http://forum.vingrad.ru/forum/topic-339507.html
(Hibernate 4 ORM: подключение и настройка) http://internetka.in.ua/hibernate-setup/
(Пессимистическая блокировка.) http://javac-dmx.blogspot.com/2015/01/12.html
(Hibernate кэш второго уровня.) http://javac-dmx.blogspot.com/2015/01/13-hibernate.html
(Кэш Hibernate) http://articles.javatalks.ru/articles/26
(Hibernate Tutorial) http://javatalks.ru/topics/11004?page=1#107768

(Hibernate cache) http://habrahabr.ru/post/135176/
(Hibernate Cache. Практика) http://habrahabr.ru/post/136375/
(Пессимистическая блокировка) http://javac-dmx.blogspot.com/2015/01/12.html
(Hibernate кэш второго уровня) http://javac-dmx.blogspot.com/2015/01/13-hibernate.html
(Hibernate Tutorial) http://javatalks.ru/topics/11004?page=1#49864
(Кэш Hibernate) http://articles.javatalks.ru/articles/26












